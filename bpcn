bpcn() {
    DEFAULT_MEMORY="16GB"
    DEFAULT_CPUS=2

    # Function to print usage
    print_usage() {
        echo "Usage: $0 [-m MEMORY] [-c CPUS]"
        echo "  MEMORY: Amount of memory per CPU to request (default: $DEFAULT_MEMORY)"
        echo "  CPUS: Number of CPUs to request (default: $DEFAULT_CPUS)"
    }

    # Function to get the status of the job
    get_job_status() {
        ssh hpc squeue --me | awk -v job_id="$job_id" '$1 == job_id {print $5}'
    }

    # Function to get the compute node
    get_compute_node() {
        ssh hpc squeue --me | awk -v job_id="$job_id" '$1 == job_id {print $8}'
    }

    # Initialize variables with default values
    MEMORY=$DEFAULT_MEMORY
    CPUS=$DEFAULT_CPUS

    # Parse options
    while getopts "m:c:h" opt; do
        case $opt in
            m) MEMORY="$OPTARG" ;;
            c) CPUS="$OPTARG" ;;
            h) print_usage
               return 0 ;;
            *) print_usage
               return 1 ;;
        esac
    done

    # Validate arguments
    if ! [[ $MEMORY =~ ^[0-9]+[MG]B$ ]]; then
        echo "Invalid memory per CPU format. Example: 32GB or 420MB"
        print_usage
        return 1
    fi

    if ! [[ $CPUS =~ ^[0-9]+$ ]]; then
        echo "Invalid CPUs format. Must be an integer."
        print_usage
        return 1
    fi

    # Submit to the bigpurple server
    cmd="sbatch --parsable --job-name=vscode --time=8:00:00 --nodes=1 --mem-per-cpu=$MEMORY --cpus-per-task=$CPUS --output=logs/server-%j.out --wrap='sleep infinity'"
    echo "Running request for $MEMORY and $CPUS CPUs"
    job_id=$(ssh hpc "$cmd")
    echo "Job submitted with ID: $job_id"

    # Ensure the job was submitted successfully
    if [ -z "$job_id" ]; then
        echo "Failed to submit job"
        return 1
    fi

    # Wait for the compute node to be ready
    STATUS=$(get_job_status)
    while [[ "$STATUS" != "R" ]]; do
        echo "Waiting for compute node..."
        sleep 10
        STATUS=$(get_job_status)
    done
    COMPUTE_NODE=$(get_compute_node)
    echo "Compute node: $COMPUTE_NODE"

    # Ensure the compute node is not empty
    if [ -z "$COMPUTE_NODE" ]; then
        echo "No compute node available"
        return 1
    fi

    # Now format the compute node to add in the configx file
    #   Host cn
    #     LogLevel QUIET
    #     HostName XXX
    #     User mm12865
    #     ProxyJump hpc
    #     StrictHostKeyChecking no
    # Overwrite the cnx host with the correct hostname
    echo "Host cn" > ~/.ssh/configx
    echo "    LogLevel QUIET" >> ~/.ssh/configx
    echo "    HostName $COMPUTE_NODE" >> ~/.ssh/configx
    echo "    User mm12865" >> ~/.ssh/configx
    echo "    ProxyJump hpc" >> ~/.ssh/configx
    echo "    StrictHostKeyChecking no" >> ~/.ssh/configx
}